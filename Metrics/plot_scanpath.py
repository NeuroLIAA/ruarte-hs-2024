import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from os import makedirs, path, listdir
from random import randint
from skimage import io, transform
import json
import argparse
import sys

""" Usage:
    To plot a model's scanpath on a given image:
        plot_scanpath.py -dataset <dataset_name> -img <image_name> -model <model_name>
    To plot a (random) human subject's scanpath on a given image:
        plot_scanpath.py -dataset <dataset_name> -img <image_name> -human
"""

""" The main method of this script (plot_scanpath) belongs to https://github.com/cvlab-stonybrook/Scanpath_Prediction/plot_scanpath.py """

DATASETS_DIR = '../Datasets'
RESULTS_DIR  = '../Experiments/visibility_peripheral_exponent'
IMG_SIZE_USED = (768, 1024)


def plot_scanpath(xs, ys, fixation_size, ax,color):

    
    initial_color  = 'red'
    scanpath_color = color

    for i in range(len(xs)):
        if i > 0:
            plt.arrow(xs[i - 1], ys[i - 1], xs[i] - xs[i - 1], ys[i] - ys[i - 1], width=3, color=scanpath_color, alpha=0.5)

    for i in range(len(xs)):
        if i == 0:
            face_color = initial_color
        else:
            face_color = 'blue'
        circle = plt.Circle((xs[i], ys[i]),
                            radius=fixation_size // 2,
                            edgecolor='red',
                            facecolor=face_color,
                            alpha=0.5)
        ax.add_patch(circle)






def parse_args():
    parser = argparse.ArgumentParser()
    group  = parser.add_mutually_exclusive_group()
    group.add_argument('-model', type=str, help='Name of the visual search model')
    group.add_argument('-human', nargs='?', const=True, default=False, help='ID of human subject to plot; leave blank to plot a scanpath generated by a random subject (who has found the target)')
    parser.add_argument('-dataset', type=str, help='Name of the dataset')
    parser.add_argument('-img', type=str, help='Name of the image on which to draw the scanpath')
    parser.add_argument('-allsubjects', action='store_true', help='Plot scanpaths of all subjects',default=False)

    args = parser.parse_args()
    return args

def get_trial_info(image_name, trials_properties):
    for trial in trials_properties:
        if trial['image'] == image_name:
            return trial        

    raise NameError('Image name must be in the dataset')

def rescale_coordinate(value, old_size, new_size, fixation_size=None, is_grid=False):
    if is_grid:
        # Rescale fixation to center of the cell in the grid
        return value * fixation_size + (fixation_size // 2)
    else:
        return (value * new_size / old_size) 

def load_dict_from_json(json_file_path):
    if not path.exists(json_file_path):
        return {}
    else:
        with open(json_file_path, 'r') as json_file:
            return json.load(json_file)

def process_image(scanpaths, image_name, images_path, is_grid,ax,bbox):
    
    image_file = path.join(images_path, image_name)
    img        = io.imread(image_file)
    original_img_size = img.shape[:2]

    # nnIBS uses a grid for images, it's necessary to upscale it

    ax.imshow(img, cmap=plt.cm.gray)

    colors = ['yellow','violet','cyan']
    for scanpaths_for_subject in scanpaths:
        img_scanpath = scanpaths_for_subject[image_name]
        scanpath_img_size = (img_scanpath['image_height'], img_scanpath['image_width'])
        fixation_size = (IMG_SIZE_USED[0] // scanpath_img_size[0], IMG_SIZE_USED[1] // scanpath_img_size[1])
        # Rescale scanpath if necessary
        X = [rescale_coordinate(x, scanpath_img_size[1], IMG_SIZE_USED[1], fixation_size[1], is_grid) for x in img_scanpath['X']]
        Y = [rescale_coordinate(y, scanpath_img_size[0], IMG_SIZE_USED[0], fixation_size[0], is_grid) for y in img_scanpath['Y']]
        X = [x*original_img_size[1]/IMG_SIZE_USED[1] for x in X]
        Y = [y*original_img_size[0]/IMG_SIZE_USED[0] for y in Y]
        fix_size = 32 * original_img_size[0] / IMG_SIZE_USED[0]
        plot_scanpath(X, Y, fix_size,ax,colors.pop(0))    

    rect = Rectangle((bbox[0], bbox[1]), bbox[2], bbox[3], alpha=0.7, edgecolor='red', facecolor='none', linewidth=2)
    ax.add_patch(rect)

if __name__ == '__main__':
    args = parse_args()

    if not args.human and not args.allsubjects:
        scanpaths_dir = path.join(path.join(RESULTS_DIR, args.dataset + '_dataset'), args.model)
        if not path.exists(scanpaths_dir):
            print('There are no results for ' + args.model + ' in the ' + args.dataset + ' dataset')
            sys.exit(0)

        scanpaths_file = path.join(scanpaths_dir, 'Scanpaths.json')
        scanpaths_for_model      = load_dict_from_json(scanpaths_file)
        
        if args.img != 'notfound':
            if not args.img in scanpaths_for_model:
                print('Image not found in ' + args.model + ' scanpaths')
                sys.exit(0)
            scanpaths = [scanpaths_for_model]
        subject = args.model
        isgrid = True
    else:
        human_scanpaths_dir = path.join(path.join(DATASETS_DIR, args.dataset), 'human_scanpaths')
        if not path.exists(human_scanpaths_dir) or not listdir(human_scanpaths_dir):
            print('There are no human subjects scanpaths for this dataset')
            sys.exit(0)
        
        human_scanpaths_files = listdir(human_scanpaths_dir)
        number_of_subjects    = len(human_scanpaths_files)
        if isinstance(args.human, str):
            human_subject = human_scanpaths_files.index(args.human + '_scanpaths.json')
        else:
            human_subject = randint(0, number_of_subjects - 1)

        target_found = False
        checked_subjects = []
        scanpaths = []
        amount = 3
        while (not target_found and not args.allsubjects) or (args.allsubjects and len(checked_subjects) < number_of_subjects):
            while human_subject in checked_subjects and len(checked_subjects) < number_of_subjects:
                human_subject = (human_subject + 1) % number_of_subjects
            scanpaths_file = path.join(human_scanpaths_dir, human_scanpaths_files[human_subject])
            scanpaths_for_subject = load_dict_from_json(scanpaths_file)
            
            if args.img in scanpaths_for_subject:
                img_scanpath = scanpaths_for_subject[args.img]
                target_found = img_scanpath['target_found']
            else:
                target_found = False
            checked_subjects.append(human_subject)
            if target_found:
                scanpaths.append(scanpaths_for_subject)
                amount -= 1
            if amount == 0:
                break
        if (isinstance(args.human, str) and not target_found) or (args.allsubjects and not scanpaths):
            print('No successful trial has been found for image ' + args.img)
            sys.exit(0)
        subject = 'Human subject ' + human_scanpaths_files[human_subject][:-15]
        isgrid = False
    
    dataset_path = path.join(DATASETS_DIR, args.dataset)
    dataset_info = load_dict_from_json(path.join(dataset_path, 'dataset_info.json'))
    
    images_path = path.join(dataset_path, dataset_info['images_dir'])

    trials_properties_file = path.join(dataset_path, 'trials_properties.json')
    trials_properties      = load_dict_from_json(trials_properties_file)
    
    trial_info = get_trial_info(args.img, trials_properties)
    fig, ax = plt.subplots()   
    ax.axis('off')
    bbox = [trial_info["target_matched_column"], 
    trial_info["target_matched_row"],   
    trial_info["target_width"],
    trial_info["target_height"],]

    process_image(scanpaths, args.img, images_path, isgrid,ax,bbox)
    save_path = path.join('Plots', path.join(args.dataset + '_dataset', args.img[:-4]))
    if not path.exists(save_path):
        makedirs(save_path)
    title = args.img[:-4] + '_' + subject.replace(' ', '_') if not args.allsubjects else "all_subjects"

    plt.subplots_adjust(left=0, right=1, top=1, bottom=0)
    plt.savefig(path.join(save_path, title + '.png'))    
    plt.close()